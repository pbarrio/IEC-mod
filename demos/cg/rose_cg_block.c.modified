/*
 * cg.c: This file is part of the IEC project.
 *
 * IEC : Inspector/Executor Compiler
 *
 * Copyright (C) 2011 the Ohio State University
 *
 * This program can be redistributed and/or modified under the terms
 * of the license specified in the LICENSE.txt file at the root of the
 * project.
 *
 * Contact: P. Sadayappan <saday@cse.ohio-state.edu>
 *
 */
/**
 * @file: cg.c
 * @author: Mahesh Ravishankar <ravishan@cse.ohio-state.edu>, John Eisenlohr <eisenloh@cse.ohio-state.edu>
 */
#include "stdio.h"
#include "math.h"
#include "stdlib.h"
#include "sys/time.h"
#include "ie.h"
#define MAX_ITER 500000

int readRBfile(FILE *fpIn,int *n,int *nz,int **rows,int **cols,double **vals)
{
	char header[128UL];
	fgets(header,(sizeof(header)),fpIn);
	fgets(header,(sizeof(header)),fpIn);
	fscanf(fpIn,"%s",header);
	// temporary values for compressed format
	int i;
	int j;
	int k;
	int nzC;
	int *rowsC;
	int *colsC;
	int *rowCounts;
	fscanf(fpIn,"%d",n);
	fscanf(fpIn,"%d",n);
	fscanf(fpIn,"%d",&nzC);
#ifdef DEBUG
#endif
	fgets(header,(sizeof(header)),fpIn);
	fgets(header,(sizeof(header)),fpIn);
	rowsC = ((int *)(malloc((( *n + 1) * sizeof(int )))));
	colsC = ((int *)(malloc((nzC * sizeof(int )))));
	rowCounts = ((int *)(malloc((( *n) * sizeof(int )))));
	// read in the rows array and initialize the
	// rowCounts rows will be corrected later
	for (j = 0; j < ( *n + 1); j++) {
		fscanf(fpIn,"%d",(rowsC + j));
		rowsC[j]--;
		if (j > 0) {
			rowCounts[j - 1] = (rowsC[j] - rowsC[j - 1]);
#ifdef DEBUG
#endif
		}
	}
	// read in the original compressed cols array
	// (no duplicates for symmetry)
	for (j = 0; j < nzC; j++) {
		fscanf(fpIn,"%d",(colsC + j));
		colsC[j]--;
		//    printf("colsC[%d]=%d\n", j, colsC[j]);
	}
#ifdef DEBUG
#endif
	// increment rowCounts for cols not recorded in compressed format
	for (j = 0; j <  *n; j++) {
		fflush(stdout);
		for (k = rowsC[j]; k < rowsC[j + 1]; k++) {
			int col = colsC[k];
			if (col > j) 
				rowCounts[col]++;
		}
	}
#ifdef DEBUG
#endif
	*rows = ((int *)(malloc((( *n + 1) * sizeof(int )))));
	( *rows)[0] = 0;
	for (j = 1; j < ( *n + 1); j++) {
		( *rows)[j] = (( *rows)[j - 1] + rowCounts[j - 1]);
		rowCounts[j - 1] = 0;
	}
	*nz = ( *rows)[ *n];
#ifdef DEBUG
#endif
	*cols = ((int *)(malloc((( *nz) * sizeof(int )))));
	*vals = ((double *)(malloc((( *nz) * sizeof(double )))));
	// in the following loop, we are going to be updating
	// the cols and vals arrays with duplicates for symmetry
	// We need two global indices into the cols and vals
	// arrays -- one for [i,j] and one for [j,i].
	// These are named thisRowGlobalIndex and laterRowGlobalIndex
	// These are computed as follows -- the rows array gives us
	// a base index into cols and vals for any row; we also
	// keep track of how many elements we have written into
	// cols and vals so far for each row so this gives an
	// offset index into the global array. The sum of the base
	// and offset is the global index.
	int thisRowGlobalIndex;
	int laterRowGlobalIndex;
	double elt;
	for (i = 0; i <  *n; i++) {
		for (k = rowsC[i]; k < rowsC[i + 1]; k++) {
			j = colsC[k];
			thisRowGlobalIndex = (( *rows)[i] + rowCounts[i]);
			rowCounts[i]++;
			// transfer the next column index in the row
			( *cols)[thisRowGlobalIndex] = j;
			// read the value and put in this row's data
			fscanf(fpIn,"%lf",&elt);
			( *vals)[thisRowGlobalIndex] = elt;
			// update later row for symmetry
			if (j > i) {
				laterRowGlobalIndex = (( *rows)[j] + rowCounts[j]);
				( *cols)[laterRowGlobalIndex] = i;
				( *vals)[laterRowGlobalIndex] = elt;
				rowCounts[j]++;
			}
		}
	}
#ifdef DEBUG
	// write out a text file
#endif
	return 1;
}
/* double rtclock()  */
/* {  */
/*   struct timezone Tzp;  */
/*   struct timeval Tp;  */
/*   int stat;  */
/*   stat = gettimeofday (&Tp, &Tzp);  */
/*   if (stat != 0) printf("Error return from gettimeofday: %d",stat);  */
/*   return(Tp.tv_sec + Tp.tv_usec*1.0e-6);  */
/* } */

void csr_matrix_vector_multiply(int n,double *vals,int *rows,int *cols,double *x,double *y)
{
	int i;
	int j;
	int k;
	{
		for (i = 0; i < n; i++) {
			y[i] = 0;
			for (k = rows[i]; k < rows[i + 1]; k++) {
				j = cols[k];
				y[i] += (vals[k] * x[j]);
			}
		}
	}
}

void generate_initial_guess(int n,double *vals,int *rows,int *cols,double *x,double *y)
{
	int j;
	{
		for (j = 0; j < n; j++) 
			x[j] = 0;
	}
}

int main(int argc,char *argv[])
{
	MPI_Init(&argc,&argv);
	ARMCI_Init();
	MPI_Comm_rank(MPI_COMM_WORLD,&__proc_id__);
	MPI_Comm_size(MPI_COMM_WORLD,&__nprocs__);
	if (argc != 2) {
		printf("***************************\n***************************\n\n");
		printf("        NO INPUT FILE \n\n");
		printf("  Usage: ./cg matNNN.txt\n\n");
		printf("***************************\n");
		exit(1);
	}
	char *fname = argv[1];
	FILE *fpIn;
	int n;
	int nz;
	double elt;
	int i;
	int j;
	int k;
	int index;
	double tol = 0.0000000000000001;
	fpIn = fopen(fname,"r");
	int *rows;
	int *cols;
	double *vals;
	double start_t;
	double stop_t;
	size_t fnl = strlen(fname);
	if ((fname[fnl - 2] == 'r') && (fname[fnl - 1] == 'b')) {
		printf("File is in RB format\n");
		int ioStatus = readRBfile(fpIn,&n,&nz,&rows,&cols,&vals);
		fclose(fpIn);
		if (ioStatus < 0) {
			printf("Error reading file\n");
			exit(1);
		}
	}
	else {
		fscanf(fpIn,"%d",&n);
		fscanf(fpIn,"%d",&nz);
		vals = ((double *)(malloc((nz * sizeof(double )))));
		rows = ((int *)(malloc(((n + 1) * sizeof(int )))));
		cols = ((int *)(malloc((nz * sizeof(int )))));
		for (j = 0; j < nz; j++) 
			fscanf(fpIn,"%lf",(vals + j));
		for (j = 0; j < nz; j++) 
			fscanf(fpIn,"%d",(cols + j));
		for (j = 0; j < (n + 1); j++) 
			fscanf(fpIn,"%d",(rows + j));
	}
	double *x = (double *)(malloc((n * sizeof(double ))));
	double *y = (double *)(malloc((n * sizeof(double ))));
	time_t seconds;
	time(&seconds);
	//srand((unsigned int) seconds);
	for (j = 0; j < n; j++) 
		y[j] = ((-1) + (2 * (((double )(rand())) / ((double )2147483647))));
	/* .................. */
	int result = 0;
	double rho;
	double old_rho;
	double beta;
	double alpha;
	double qdotp;
	double *r = (double *)(malloc((n * sizeof(double ))));
	double *p_new = (double *)(malloc((n * sizeof(double ))));
	double *p_old = (double *)(malloc((n * sizeof(double ))));
	double *q = (double *)(malloc((n * sizeof(double ))));
	double *Ax = (double *)(malloc((n * sizeof(double ))));
	double temp;
	generate_initial_guess(n,vals,rows,cols,x,y);
	csr_matrix_vector_multiply(n,vals,rows,cols,x,Ax);
	{
		for (j = 0; j < n; j++) 
			r[j] = (y[j] - Ax[j]);
	}
	int iter = 0;
	{
		rho = 0.0;
		for (j = 0; j < n; j++) {
			rho += (r[j] * r[j]);
			p_new[j] = r[j];
		}
	}
	int i_1;
	int j_1;
	int k_1;
	int j_2;
	int j_3;
	int j_4;
  
#pragma arrays q [ n ] [ 1 ], vals [ nz ] [ 1 ], p_old [ n ] [ 1 ], p_new [ n ] [ 1 ], r [ n ] [ 1 ], x [ n ] [ 1 ], rows [ n + 1 ] [ 1 ], cols [ nz ] [ 1 ]
/* 	__nthreads__ = omp_get_max_threads(); */
	int iter_num_count[1] = {n - 0};
	int data_num_count[6] = { nz , n , n , n , n ,  n };
	int ro_mask[6] = {1,0,0,0,0, 0};
	create_inspector(__proc_id__,__nprocs__,/*__nthreads__,*/1,6,5,2,iter_num_count,data_num_count,ro_mask);
	int __size_rows__ =  n + 1 ;
	set_access_array_param(0, n + 1 , 1 ,__size_rows__ / __nprocs__ * __proc_id__ + rows);
	int __size_cols__ =  nz ;
	set_access_array_param(1, nz , 1 ,__size_cols__ / __nprocs__ * __proc_id__ + cols);
	int __local_block_0_start__ = (n - 0) / __nprocs__ * __proc_id__ + 0;
	int __local_block_0_end__;
	if (__proc_id__ != __nprocs__ - 1) 
		__local_block_0_end__ = (n - 0) / __nprocs__ * (__proc_id__ + 1) + 0;
	else 
		__local_block_0_end__ = n;
	int *__0_status__ = (int *)(malloc(sizeof(int ) * (__local_block_0_end__ - __local_block_0_start__)));
	memset(__0_status__,0,sizeof(int ) * (__local_block_0_end__ - __local_block_0_start__));
	int __local_block_1_start__ = (n - 0) / __nprocs__ * __proc_id__ + 0;
	int __local_block_1_end__;
	if (__proc_id__ != __nprocs__ - 1) 
		__local_block_1_end__ = (n - 0) / __nprocs__ * (__proc_id__ + 1) + 0;
	else 
		__local_block_1_end__ = n;
	int *__1_status__ = (int *)(malloc(sizeof(int ) * (__local_block_1_end__ - __local_block_1_start__)));
	memset(__1_status__,0,sizeof(int ) * (__local_block_1_end__ - __local_block_1_start__));
	int __local_block_2_start__ = (n - 0) / __nprocs__ * __proc_id__ + 0;
	int __local_block_2_end__;
	if (__proc_id__ != __nprocs__ - 1) 
		__local_block_2_end__ = (n - 0) / __nprocs__ * (__proc_id__ + 1) + 0;
	else 
		__local_block_2_end__ = n;
	int *__2_status__ = (int *)(malloc(sizeof(int ) * (__local_block_2_end__ - __local_block_2_start__)));
	memset(__2_status__,0,sizeof(int ) * (__local_block_2_end__ - __local_block_2_start__));
	int __local_block_3_start__ = (n - 0) / __nprocs__ * __proc_id__ + 0;
	int __local_block_3_end__;
	if (__proc_id__ != __nprocs__ - 1) 
		__local_block_3_end__ = (n - 0) / __nprocs__ * (__proc_id__ + 1) + 0;
	else 
		__local_block_3_end__ = n;
	int *__3_status__ = (int *)(malloc(sizeof(int ) * (__local_block_3_end__ - __local_block_3_start__)));
	memset(__3_status__,0,sizeof(int ) * (__local_block_3_end__ - __local_block_3_start__));
	int __local_block_4_start__ = (n - 0) / __nprocs__ * __proc_id__ + 0;
	int __local_block_4_end__;
	if (__proc_id__ != __nprocs__ - 1) 
		__local_block_4_end__ = (n - 0) / __nprocs__ * (__proc_id__ + 1) + 0;
	else 
		__local_block_4_end__ = n;
	int *__4_status__ = (int *)(malloc(sizeof(int ) * (__local_block_4_end__ - __local_block_4_start__)));
	memset(__4_status__,0,sizeof(int ) * (__local_block_4_end__ - __local_block_4_start__));

	// Create hypergraph
	do {
		for (i = __local_block_0_start__; i < __local_block_0_end__; i++) 
			if (__0_status__[i - __local_block_0_start__] == 0) {
				__0_status__[i - __local_block_0_start__] = 1;
				add_vertex(0,i);
				{
					if (is_known(0,i) && is_known(0,i + 1)) 
						for (k = get_elem(0,i); k < get_elem(0,i + 1); k++) {{
								add_pin_to_net(0,k,1,0);
								if (is_known(1,k)) 
									add_pin_to_net(3,get_elem(1,k),0,0);
								else 
									__0_status__[i - __local_block_0_start__] = 0;;
							};
						}
					else {
						__0_status__[i - __local_block_0_start__] = 0;;
					}
					add_pin_to_net(5,i,1,1);;
				};
			}
			else ;
		for (j = __local_block_1_start__; j < __local_block_1_end__; j++) 
			if (__1_status__[j - __local_block_1_start__] == 0) {
				__1_status__[j - __local_block_1_start__] = 1;
				add_vertex(0,j);
				add_pin_to_net(5,j,1,1);
				add_pin_to_net(3,j,1,1);;
			}
			else ;
		for (j = __local_block_2_start__; j < __local_block_2_end__; j++) 
			if (__2_status__[j - __local_block_2_start__] == 0) {
				__2_status__[j - __local_block_2_start__] = 1;
				add_vertex(0,j);
				{
					add_pin_to_net(1,j,1,1);
					add_pin_to_net(3,j,1,1);
					add_pin_to_net(2,j,1,1);
					add_pin_to_net(5,j,1,1);
					add_pin_to_net(4,j,1,1);;
				};
			}
			else ;
		for (j = __local_block_3_start__; j < __local_block_3_end__; j++) 
			if (__3_status__[j - __local_block_3_start__] == 0) {
				__3_status__[j - __local_block_3_start__] = 1;
				add_vertex(0,j);
				add_pin_to_net(2,j,1,1);;
			}
			else ;
		for (j = __local_block_4_start__; j < __local_block_4_end__; j++) 
			if (__4_status__[j - __local_block_4_start__] == 0) {
				__4_status__[j - __local_block_4_start__] = 1;
				add_vertex(0,j);
				add_pin_to_net(3,j,1,1);
				add_pin_to_net(2,j,1,1);
				add_pin_to_net(4,j,1,1);;
			}
			else ;;
	} while (!done_graph_gen());
	partition_hypergraph(2);;
	free(__0_status__);
	__0_status__ = ((int *)(malloc(sizeof(int ) * get_proc_iter_size(0))));
	memset(__0_status__,0,sizeof(int ) * get_proc_iter_size(0));
	free(__1_status__);
	__1_status__ = ((int *)(malloc(sizeof(int ) * get_proc_iter_size(0))));
	memset(__1_status__,0,sizeof(int ) * get_proc_iter_size(0));
	free(__2_status__);
	__2_status__ = ((int *)(malloc(sizeof(int ) * get_proc_iter_size(0))));
	memset(__2_status__,0,sizeof(int ) * get_proc_iter_size(0));
	free(__3_status__);
	__3_status__ = ((int *)(malloc(sizeof(int ) * get_proc_iter_size(0))));
	memset(__3_status__,0,sizeof(int ) * get_proc_iter_size(0));
	free(__4_status__);
	__4_status__ = ((int *)(malloc(sizeof(int ) * get_proc_iter_size(0))));
	memset(__4_status__,0,sizeof(int ) * get_proc_iter_size(0));

	do {
		int __0_status_counter__ = 0;
		for (i = 0; i < n; i++) {
			if (get_vertex_home(0,i) /*/ __nthreads__*/ == __proc_id__) {
				if (__0_status__[__0_status_counter__] == 0) {
					__0_status__[__0_status_counter__] = 1;
					{
						if (is_known(0,i) && is_known(0,i + 1)) 
							for (k = get_elem(0,i); k < get_elem(0,i + 1); k++) {{
									if (is_known(1,k)) ;
									else 
										__0_status__[__0_status_counter__] = 0;;
								};
							}
						else {
							__0_status__[__0_status_counter__] = 0;;
						};
					};
				}
				else ;
				++__0_status_counter__;;
			}
			else ;;
		}
		int __1_status_counter__ = 0;
		for (j = 0; j < n; j++) {
			if (get_vertex_home(0,j) /*/ __nthreads__*/ == __proc_id__) {
				if (__1_status__[__1_status_counter__] == 0) {
					__1_status__[__1_status_counter__] = 1;;
				}
				else ;
				++__1_status_counter__;;
			}
			else ;;
		}
		int __2_status_counter__ = 0;
		for (j = 0; j < n; j++) {
			if (get_vertex_home(0,j) /*/ __nthreads__*/ == __proc_id__) {
				if (__2_status__[__2_status_counter__] == 0) {
					__2_status__[__2_status_counter__] = 1;
					{;
					};
				}
				else ;
				++__2_status_counter__;;
			}
			else ;;
		}
		int __3_status_counter__ = 0;
		for (j = 0; j < n; j++) {
			if (get_vertex_home(0,j) /*/ __nthreads__*/ == __proc_id__) {
				if (__3_status__[__3_status_counter__] == 0) {
					__3_status__[__3_status_counter__] = 1;;
				}
				else ;
				++__3_status_counter__;;
			}
			else ;;
		}
		int __4_status_counter__ = 0;
		for (j = 0; j < n; j++) {
			if (get_vertex_home(0,j) /*/ __nthreads__*/ == __proc_id__) {
				if (__4_status__[__4_status_counter__] == 0) {
					__4_status__[__4_status_counter__] = 1;;
				}
				else ;
				++__4_status_counter__;;
			}
			else ;;
		};
	}while (!done_graph_gen());
	free(__0_status__);
	free(__1_status__);
	free(__2_status__);
	free(__3_status__);
	free(__4_status__);;
  
/* #pragma omp parallel firstprivate (i,j,k,tol,rho,old_rho,beta,alpha,qdotp,temp,iter,__thread_id__,__myid__) */
/* 	{ */
/* 		__thread_id__ = omp_get_thread_num(); */
	__myid__ = __proc_id__/* * __nthreads__ + __thread_id__*/;
	int __body_0__ = 0;
	int __loop_i_1__ = 0;
	int __body_i_1__ = 0;
	int __body_1__ = 0;
	int __body_2__ = 0;
	int __body_3__ = 0;
	int __body_4__ = 0;

	for (i = 0; i < n; i++) {
		if (get_vertex_home(0,i) == __myid__) {{
				for (k = get_elem(0,i); k < get_elem(0,i + 1); k++) {{;
					}
					__body_i_1__ = __body_i_1__ + 1;;
				}
				__loop_i_1__ = __loop_i_1__ + 1;;
			}
			__body_0__ = __body_0__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {
			__body_1__ = __body_1__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {{;
			}
			__body_2__ = __body_2__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {
			__body_3__ = __body_3__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {
			__body_4__ = __body_4__ + 1;;
		}
		else ;;
	};

	int *__o_vals_k_0_ = (int *)(malloc(__loop_i_1__ * sizeof(int )));
	int __o_vals_k_0__offset;
	int *__i_p_new_k_1_ = (int *)(malloc(__body_i_1__ * sizeof(int )));
	int __nlocal_0__ = __body_0__;
	int *__lb_k_i_1__ = (int *)(malloc(__loop_i_1__ * sizeof(int )));
	int *__ub_k_i_1__ = (int *)(malloc(__loop_i_1__ * sizeof(int )));
	int __nlocal_1__ = __body_1__;
	int __nlocal_2__ = __body_2__;
	int __nlocal_3__ = __body_3__;
	int __nlocal_4__ = __body_4__;
	__body_0__ = 0;
	__loop_i_1__ = 0;
	__body_i_1__ = 0;
	__body_1__ = 0;
	__body_2__ = 0;
	__body_3__ = 0;
	__body_4__ = 0;

	for (i = 0; i < n; i++) {
		if (get_vertex_home(0,i) == __myid__) {{
				__lb_k_i_1__[__loop_i_1__] = get_elem(0,i);
				__ub_k_i_1__[__loop_i_1__] = get_elem(0,i + 1);
				for (k = get_elem(0,i); k < get_elem(0,i + 1); k++) {{
						if (k == get_elem(0,i)) 
							__o_vals_k_0_[__loop_i_1__] = k;
						else ;
						__i_p_new_k_1_[__body_i_1__] = get_elem(1,k);;
					}
					__body_i_1__ = __body_i_1__ + 1;;
				}
				__loop_i_1__ = __loop_i_1__ + 1;;
			}
			__body_0__ = __body_0__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {
			__body_1__ = __body_1__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {{;
			}
			__body_2__ = __body_2__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {
			__body_3__ = __body_3__ + 1;;
		}
		else ;;
	}

	for (j = 0; j < n; j++) {
		if (get_vertex_home(0,j) == __myid__) {
			__body_4__ = __body_4__ + 1;;
		}
		else ;;
	}

	int __localsize_vals__ = get_local_size(/*__thread_id__,*/0);
	double *__local_vals__ = (double *)(malloc(__localsize_vals__ * sizeof(double )));
	populate_local_array(/*__thread_id__,*/0,__local_vals__,vals,1);
	renumber_offset_array(/*__thread_id__,*/0,__loop_i_1__,__o_vals_k_0_,__lb_k_i_1__);
	int __localsize_x__ = get_local_size(/*__thread_id__,*/1);
	double *__local_x__ = (double *)(malloc(__localsize_x__ * sizeof(double )));
	populate_local_array(/*__thread_id__,*/1,__local_x__,x,1);
	int __localsize_r__ = get_local_size(/*__thread_id__,*/2);
	double *__local_r__ = (double *)(malloc(__localsize_r__ * sizeof(double )));
	populate_local_array(/*__thread_id__,*/2,__local_r__,r,1);
	int __localsize_p_new__ = get_local_size(/*__thread_id__,*/3);
	double *__local_p_new__ = (double *)(malloc(__localsize_p_new__ * sizeof(double )));
	populate_local_array(/*__thread_id__,*/3,__local_p_new__,p_new,1);
	renumber_access_array(/*__thread_id__,*/3,__body_i_1__,__i_p_new_k_1_);
	communicate_reads_for(/*__thread_id__,*/0,3);
	int __localsize_p_old__ = get_local_size(/*__thread_id__,*/4);
	double *__local_p_old__ = (double *)(malloc(__localsize_p_old__ * sizeof(double )));
	populate_local_array(/*__thread_id__,*/4,__local_p_old__,p_old,1);
	int __localsize_q__ = get_local_size(/*__thread_id__,*/5);
	double *__local_q__ = (double *)(malloc(__localsize_q__ * sizeof(double )));
	populate_local_array(/*__thread_id__,*/5,__local_q__,q,1);
	setup_executor(/*__thread_id__*/);;;

	/* EXECUTOR */
	while((rho >= tol) && (iter < 500000)){

		iter++;
		/* printf("iter %d, rho = %lf\n", iter, rho); */
		/* #pragma part_loop */
		__body_0__ = 0;
		__loop_i_1__ = 0;
		__body_i_1__ = 0;
		communicate_reads(/*__thread_id__,*/0);

		for (i = 0; i < __nlocal_0__; ++i) {
			temp = 0;
			__o_vals_k_0__offset = __o_vals_k_0_[__loop_i_1__];
			for (k = __lb_k_i_1__[__loop_i_1__]; k < __ub_k_i_1__[__loop_i_1__]; ++k) {
				temp += (__local_vals__[__o_vals_k_0__offset + k] * __local_p_new__[__i_p_new_k_1_[__body_i_1__]]);
				__body_i_1__ = __body_i_1__ + 1;;
			}
			__loop_i_1__ = __loop_i_1__ + 1;
			__local_q__[i] = temp;;
		}
		// <q,p>
		qdotp = 0;
		/* #pragma part_loop */
		__body_1__ = 0;
		for (j = 0; j < __nlocal_1__; ++j) {
			qdotp += (__local_q__[j] * __local_p_new__[j]);;
		}
		reduce_scalar(/*__thread_id__,*/&qdotp);

		alpha = (rho / qdotp);
		/* #pragma part_loop */
		__body_2__ = 0;
		for (j = 0; j < __nlocal_2__; ++j) {
			__local_x__[j] += (alpha * __local_p_new__[j]);
			__local_r__[j] += (-alpha * __local_q__[j]);
			__local_p_old__[j] = __local_p_new__[j];;
		}
		old_rho = rho;
		// <r,r>
		rho = 0;
		/* #pragma part_loop */
		__body_3__ = 0;
		for (j = 0; j < __nlocal_3__; ++j) {
			rho += (__local_r__[j] * __local_r__[j]);;
		}
		reduce_scalar(/*__thread_id__,*/&rho);
		beta = (rho / old_rho);
		/* #pragma part_loop */
		__body_4__ = 0;
		for (j = 0; j < __nlocal_4__; ++j) {
			__local_p_new__[j] = (__local_r__[j] + (beta * __local_p_old__[j]));;
		}
	}

	populate_global_arrays(/*__thread_id__*/);
	free(__o_vals_k_0_);
	free(__local_vals__);
	free(__local_x__);
	free(__local_r__);
	free(__i_p_new_k_1_);
	free(__local_p_new__);
	free(__local_p_old__);
	free(__local_q__);
	free(__lb_k_i_1__);
	free(__ub_k_i_1__);
	delete_inspector(/*__thread_id__*/);;
/* 	} */

	ARMCI_Finalize();
	MPI_Finalize();
	return 0;
	/* /\* .................. *\/ */
	/* /\* printf("CG converged in %d iterations\n",iter); *\/ */
	/* double *checkY = (double*)malloc(n*sizeof(double)); */
	/* double error, maxError = 0; */
	/* int maxErrorIndex = 0; */
	/* csr_matrix_vector_multiply( n, vals, rows, cols, x, checkY ); */
	/* for ( j = 0; j < n; j++ ) { */
	/*   error = fabs( y[j] - checkY[j] ); */
	/*   if ( error > maxError ) { */
	/*     maxError = error; */
	/*     maxErrorIndex = j; */
	/*   } */
	/* } */
	/* printf("Max error at index %d, error %lf\n", maxErrorIndex, maxError); */
}
